// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password     String?
  role          UserRole @default(USER)
  accounts      Account[]
  shops         Shop[]
  bookings  Booking[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id       String   @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id       String   @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id       String   @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id       String   @id @default(cuid())
  userId   String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Shop {
  id          String   @id @default(cuid())
  name        String
  phone       String?
  mail        String?
  address     String?
  schedule    String?
  image       String?
  user       User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId     String
  workers     Worker[]
    schedules ShopSchedule[]
  breaks    ShopBreak[]
}


model ShopSchedule {
  id        String   @id @default(cuid())
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  dayOfWeek Int      // 0-6 (Domingo-S치bado)
  startTime String   // formato "HH:mm"
  endTime   String   // formato "HH:mm"
  isEnabled Boolean  @default(true)
}

model ShopBreak {
  id        String   @id @default(cuid())
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  dayOfWeek Int      // 0-6 (Domingo-S치bado)
  startTime String   // formato "HH:mm"
  endTime   String   // formato "HH:mm"
  name      String   // ej: "Almuerzo", "Descanso"
}

enum WorkerStatus {
  ACTIVE
  INACTIVE
  UNASSIGNED
}


model Worker {
  id          String   @id @default(cuid())
  name        String
  phone       String?
  mail        String?
  avatar      String?
  status      WorkerStatus @default(UNASSIGNED)
  shop        Shop?     @relation(fields: [shopId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shopId      String?
  // Nueva relaci칩n
  services    Service[] @relation("WorkerToService")
}

model Service {
  id          String   @id @default(cuid())
  ownerId     String
  name        String
  description String?
  image       String?
  bookings    Booking[]
  price       Float
  duration    Int
  // Nueva relaci칩n
  workers     Worker[] @relation("WorkerToService")
}

model Booking {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  serviceId  String
  service    Service   @relation(fields: [serviceId], references: [id])
  date       DateTime
  status     String    @default("pending")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}